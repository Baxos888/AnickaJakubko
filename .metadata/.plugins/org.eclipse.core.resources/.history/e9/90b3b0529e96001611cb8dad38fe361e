/*
 * vrs_cv5.c
 *
 *  Created on: 18. 10. 2016
 *      Author: jakub
 */
void setup() {
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn; //zoznam prerušení nájdete v súbore stm32l1xx.h
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	//void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT,		FunctionalState NewState);
	ADC_InitTypeDef ADC_InitStructure;
	ADC_ITConfig(ADC1,ADC_IT,ENABLE);

	//FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG);
	ADC_GetFlagStatus(ADC1,ADC_FLAF_EOC);
	ADC_GetFlagStatus(ADC1,ADC_FLAF_OVR);

	GPIO_InitTypeDef gpioATXInitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	gpioATXInitStructure.GPIO_Mode = GPIO_Mode_AF;
	gpioATXInitStructure.GPIO_OType = GPIO_OType_PP;
	gpioATXInitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	gpioATXInitStructure.GPIO_Speed = GPIO_Speed_40MHz;
	gpioATXInitStructure.GPIO_Pin = GPIO_Pin_9; //TX
	GPIO_Init(GPIOA, &gpioATXInitStructure);

	GPIO_InitTypeDef gpioARXInitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	gpioARXInitStructure.GPIO_Mode = GPIO_Mode_AF;
	gpioARXInitStructure.GPIO_OType = GPIO_OType_PP;
	gpioARXInitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	gpioARXInitStructure.GPIO_Speed = GPIO_Speed_40MHz;
	gpioARXInitStructure.GPIO_Pin = GPIO_Pin_10; //RX
	GPIO_Init(GPIOA, &gpioARXInitStructure);

	//void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource,	uint8_t GPIO_AF)
	GPIO_PinAFConfig(GPIOA, GPIO_Pin_9, GPIO_AF_USART1);
	GPIO_PinAFConfig(GPIOA, GPIO_Pin_10, GPIO_AF_USART1);


	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
	USART_InitStructure.USART_BaudRate = 2*9600;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl =
			USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_Init(USART1, &USART_InitStructure);

	//void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
	USART_ITConfig(USART1,RXNE,ENABLE);
	//void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
	USART_Cmd(USART1,ENABLE);

}
